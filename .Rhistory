install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("googleVis")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages("shiny")
shiny::runApp('C:/Documents and Settings/Macro/Desktop/Ivandata/shiny_app_pricing_management')
require(rCharts)
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
map3
require(rCharts)
map3 <- Leaflet$new()
map3$setView(c(51.505, -0.09), zoom = 13)
map3$marker(c(51.5, -0.09), bindPopup = "<p> Hi. I am a popup </p>")
map3$marker(c(51.495, -0.083), bindPopup = "<p> Hi. I am another popup </p>")
map3$print("chart7")
map3
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
plot(m)
M
plot(M)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400))
print(G, "chart")
plot(G)
G
G2 <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =600,height = 400, region = "150"))
print(G2, "chart")
plot(G2)
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
print(Line, "chart")
plot(Line)
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
df
df
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
df
suppressPackageStartupMessages(library(googleVis))
require(rCharts)
G <- gvisGeoChart(Exports, "Country", "Profit",options=list(width=200, height=100))
T <- gvisTable(Exports,options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year",options=list(width=400, height=370))
GT <- gvisMerge(G,T, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE, tableOptions="bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
Fruits
Geo <- gvisGeoChart(CityPopularity, locationvar='City',
+ colorvar='Popularity',
+ options=list(region='US', height=350,
+ displayMode='markers',
+ colorAxis="{values:[200,400,600,800],
+ colors:[\'red', \'pink\', \'orange',\'green']}")
+ )
R> plot(Geo)
Geo <- gvisGeoChart(CityPopularity, locationvar='City',
colorvar='Popularity',
options=list(region='US', height=350,
displayMode='markers',
colorAxis="{values:[200,400,600,800],colors:[\'red', \'pink\', \'orange',\'green']}")
)
plot(Geo)
df <- data.frame("Year"=c(2009,2010), "Lloyd\\'s"=c(86.1, 93.3),
"Munich Re\\'s R/I"=c(95.3, 100.5),
check.names=FALSE)
df
CR <- gvisColumnChart(df, options=list(vAxis='{baseline:0}',
title="Combined Ratio %",
legend="{position:'bottom'}"))
plot(CR)
df <- data.frame("Year"=c(2009,2010), "Lloyd\\'s"=c(86.1, 93.3),
"Munich Re\\'s R/I"=c(95.3, 100.5),
check.names=FALSE)
df
CR <- gvisColumnChart(df, options=list(vAxis='{baseline:0}',
title="Combined Ratio %",
gvis.editor ='Edit me!',
legend="{position:'bottom'}"))
plot(CR)
```{r motionchartcode, results='asis'}
library(googleVis)
plot(gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=600, height=400)), tag="chart")
```
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1
require(rCharts)
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line", "bubble", "scatter"),
group = "Clap", size = "Age")
h1
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
x1 <- xPlot(value ~ year, group = "category", data = uspexp, type = "line-dotted")
x1
require(reshape2)
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
x1 <- xPlot(value ~ year, group = "category", data = uspexp, type = "line-dotted")
x1
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1$print("chart3")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male, type = "multiBarChart")
n1
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",
"bubble", "scatter"), group = "Clap", size = "Age")
h1$print("chart5")
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line", "bubble", "scatter"),
group = "Clap", size = "Age")
h1
require(DMwR)
data(sales)
head(sales)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
summary(sales)
?nlevels
nlevels(sales$ID)
nlevels(sales$Prod)
sum(is.na(sales$Quant)& is.na(sales$Val))
table(sales$Insp)
nrow(sales)
table(sales$Insp)/nrow(sales)*100
totS <- table(sales$ID)
totP <- table(sales$Prod)
xlab='Salespeople',ylab='Amount')
barplot(totS, main="Transactions per salespeople", name.arg='',
xlab='Salespeople',ylab='Amount')
barplot(totP, main='Transactions per product',
xlab='Products',ylab='Amount')
barplot(totP, main='Transactions per product', names.arg='',
xlab='Products',ylab='Amount')
par(mfcol = c(1,2))
barplot(totS, main="Transactions per salespeople", name.arg='',
xlab='Salespeople',ylab='Amount')
barplot(totP, main='Transactions per product', names.arg='',
xlab='Products',ylab='Amount')
par(mfcol = c(2,1))
barplot(totS, main="Transactions per salespeople", name.arg='',
xlab='Salespeople',ylab='Amount')
barplot(totP, main='Transactions per product', names.arg='',
xlab='Products',ylab='Amount')
par(mfcol = c(1,2))
barplot(totS, main="Transactions per salespeople", name.arg='',
xlab='Salespeople',ylab='Amount')
barplot(totP, main='Transactions per product', names.arg='',
xlab='Products',ylab='Amount')
sales$Uprice <- sales$Val/sales$Quant
summary(sales$Uprice)
attach(sales)
upp <- aggregate(Uprice,list(Prod,median,na.rm=T))
upp <- aggregate(Uprice,list(Prod),median,na.rm=T)
upp
topP <- sapply(c(T,F),function(o)
upp[order(upp[,2],decreasing=o)[1:5],1])
topP
colnames(topP)<-c('Expensive','Cheap')
topP
tops <- sales[Prod %in% topP[1,],c('Prod','Uprice')]
tops
tops$Prod <- factor(tops$Prod)
boxplot(Uprice~Prod, data=tops,ylab='Uprice',log='y')
par(mfcol = c(1,1))
boxplot(Uprice~Prod, data=tops,ylab='Uprice',log='y')
boxplot(Uprice~Prod, data=tops,ylab='Uprice')
log='y'
boxplot(Uprice~Prod, data=tops,ylab='Uprice',log='y')
vs <- aggregate(Val,list(ID),median,na.rm=T)
scoresSs <- sapply(c(T,F),function(o)
vs[order(vs$x,decreasing=o)[1:5],1])
vs
scoresSs
colnames(scoresSs)<-c('Most','Least')
scoresSs
scores <- sales[ID %in% scoresSs[1,],c('ID','Val')]
scores
scores$ID <- factor(scores$ID)
boxplot(Val~ID,data=scores,ylab='Val',log='y')
vs <- aggregate(Val,list(ID),sum,na.rm=T)
scoresSs <- sapply(c(T,F),function(o)
vs[order(vs$x,decreasing=o)[1:5],1])
colnames(scoresSs)<-c('Most','Least')
scoresSs
scores <- sales[ID %in% scoresSs[1,],c('ID','Val')]
scores$ID <- factor(scores$ID)
boxplot(Val~ID,data=scores,ylab='Val',log='y')
attach(sales)
upp <- aggregate(Uprice,list(Prod),median,na.rm=T)
topP <- sapply(c(T,F),function(o)
upp[order(upp[,2],decreasing=o)[1:5],1])
colnames(topP)<-c('Expensive','Cheap')
topP
tops <- sales[Prod %in% topP[1,],c('Prod','Uprice')]
tops$Prod <- factor(tops$Prod)
par(mfcol = c(1,2))
boxplot(Uprice~Prod, data=tops,ylab='Uprice',log='y')
vs <- aggregate(Val,list(ID),sum,na.rm=T)
scoresSs <- sapply(c(T,F),function(o)
vs[order(vs$x,decreasing=o)[1:5],1])
colnames(scoresSs)<-c('Most','Least')
scoresSs
scores <- sales[ID %in% scoresSs[1,],c('ID','Val')]
scores$ID <- factor(scores$ID)
boxplot(Val~ID,data=scores,ylab='Val',log='y')
sum(vs[order(vs$x,decreasing=T)[1:100],2])/sum(Val,na.rm=T)*100
sum(vs[order(vs$x,decreasing=F)[1:2000],2])/sum(Val,na.rm=T)*100
head(Val)
qs <- aggregate(Quant,list(Prod),sum,na.rm=T)
scoresPs <- sapply(c(T,F),function(x)
qs[order(qs$x,decreasing=o)[1:5,1]])
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5,1]])
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5,1])
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5,1]]
)
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5,1]])
scoresPs <- sapply(c(T,F),function(o)
qs[order(qs$x,decreasing=o)[1:5],1])
colnames(scoresPs) <- c('Most','Least')
scoresPs
sum(as.double(qs[order(qs$x,decreasing=T)[1:100],2]))/sum(as.double(Quant),na.rm=T)*100
sum(as.double(qs[order(qs$x,decreasing=F)[1:2000],2]))/sum(as.double(Quant),na.rm=T)*100
sum(as.double(qs[order(qs$x,decreasing=F)[1:4000],2]))/sum(as.double(Quant),na.rm=T)*100
head(Uprice)
list(Prod=Prod)
head(list(Prod=Prod))
head(Prod)
?tapply
ind <- list(c(1, 2, 2), c("A", "A", "B"))
table(ind)
out <- tapply(Uprice,list(Prod=Prod),function(x)length(boxplot.stats(x)$out))
out
out[order(out,decreasing = T)[1:10]]
sum(out)
sum(out)/nrow(sales)
sum(out)/nrow(sales)*100
source('data explorasion.R')
source('Data explorasion.R')
source('Data.explorasion.R')
source('Data_explorasion.R')
gc()
totS <- table(ID)
totP <- table(Prod)
head(totS)
nas <- sales[which(is.na(Quant)&is.na(Val)),c('ID','Prod')]
nas
propS <- 100*table(nan$ID)/totS
propS
propS <- 100*table(nas$ID)/totS
propS
head(propS)
propS[order(propS,decreasing=T)[1:10]]
propP <- 100*table(nas$Prod)/totP
head(propP)
propP[order(propP,decreasing=T)[1:10]]
detach(sales)
sales <- sales[-which(is.na(sales$Quant)&is.na(sales$Val)),]
nnasQp <- tapply(sales$Quant,list(sales$Prod),function(x)sum(is.na(x)))
propNAsQp <- nnasQp/table(sales$Prod)
propNAsQp[order(propNAsQp,decreasing=T)[1:10]]
sales <- sales[!sales$Prod %in% c('p2442','p2443'),]
nlevels(sales$Prod)
sales$Prod <- factor(sales$Prod)
nlevels(sales$Prod)
nnasQs <- tapply(sales$Quant,list(sales$ID),function(x)sum(is.na(x)))
propNAsQs <- nnasQs/table(sales$ID)
propNAsQs[order(propNAsQs,decreasing = T)[1:10]]
nnasVp <- tapply(sales$Val,list(sales$Prod),function(x)sum(is.na(x)))
propNAsVp<-nnasVp/table(sales$Val)
propNAsVp<-nnasVp/table(sales$Prod)
propNAsVp[order(propNAsVp,decreasing = T)[1:10]]
nnasVs <- tapply(sales$Val,list(sales$ID),function(x)sum(is.na(x)))
propNAsVs<-nnasVp/table(sales$ID)
propNAsVs[order(propNAsVp,decreasing = T)[1:10]]
propNAsVs<-nnasVs/table(sales$ID)
propNAsVs[order(propNAsVp,decreasing = T)[1:10]]
nnasVs <- tapply(sales$Val,list(sales$ID),function(x)sum(is.na(x)))
propNAsVs<-nnasVs/table(sales$ID)
propNAsVs[order(propNAsVs,decreasing = T)[1:10]]
require(rjson)
install.packages('rjson')
setwd(choose.dir())
require(rjson)
data.path <- '/data'
dir()
dir(data.patj)
dir(data.path)
data.file <- file.name(data.path)
data.file <- basename(data.path)
data.file
data.path <- '/data/'
data.file <- basename(data.path)
data.file
data.file <- basename('data/')
data.file
require(rjson)
test <- fromJSON('Data/test.json')
test <- fromJSON('/Data/test.json')
test <- fromJSON('//Data//test.json')
test <- fromJSON('test.json')
require(rjson)
setwd(choose.dir())
?fromJSON
fromJSON('test.json')
fromJSON('t','test.json')
fromJSON(T,'test.json')
fromJSON(file = 'test.json',method = 'C')
setwd(choose.dir())
require(rjson)
test <- fromJSON(file = 'Data\test.json',method = 'C')
test <- fromJSON(file = 'Data/test.json',method = 'C')
train <- fromJSON(file = 'Data/train.json',method = 'C')
test[1]
